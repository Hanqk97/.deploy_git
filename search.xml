<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java-basic-note</title>
      <link href="/2024/04/08/java-basic-note/"/>
      <url>/2024/04/08/java-basic-note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="A-B-I"><a href="#A-B-I" class="headerlink" title="A+B I"></a>A+B I</h1><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        sc.close(); <span class="comment">// Close Scanner</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scanner Method:</p><ul><li><code>next()</code>: Reads the next string.</li><li><code>nextInt()</code>: Reads the next integer.</li><li><code>nextDouble()</code>: Reads the next double precision floating point number.</li><li><code>nextLine()</code>: Reads the next line of text.</li><li><code>hasNext()</code>: Determines if there is another input item. If there is, it - returns true; otherwise, it returns false.</li><li><code>hasNextInt()</code>: Checks if there is another integer input item.</li><li><code>hasNextDouble()</code>: Checks if there is another double precision floating point number input item.</li></ul><h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h2><ul><li>Integer Types<ul><li><code>byte</code>: Occupies 1 byte of computer storage, representing a range from -128 to 127.</li><li><code>short</code>: Takes up 2 bytes of storage, with a range from -32,768 to 32,767.</li><li><code>int</code>: 4 bytes, with a range of approximately -2^31 to 2^31-1.</li><li><code>long</code>: 8 bytes, with a range of approximately -2^63 to 2^63-1.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">98</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">130</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">gdp</span> <span class="operator">=</span> <span class="number">10000000000L</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li>Floating Point Types<ul><li>float: Single precision floating point, occupies 4 bytes, often used to store smaller floating point numbers. </li><li>double: Double precision floating point, takes up 8 bytes,typically used for storing larger or more precise floating point numbers.  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">floatValue</span> <span class="operator">=</span> <span class="number">3.14159f</span>; <span class="comment">// Use &#x27;f&#x27; suffix for float</span></span><br><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">2.99</span>; <span class="comment">// Default is double type</span></span><br></pre></td></tr></table></figure></li></ul></li><li>Character Type<ul><li>Used to store a single character (enclosed in single quotes), such as ‘A’ and ‘1’.</li></ul></li><li>Boolean Type<ul><li>Represents a boolean value, only two possible values: true and false.</li></ul></li></ul><h1 id="A-B-II"><a href="#A-B-II" class="headerlink" title="A+B II"></a>A+B II</h1><h2 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h2><p>Only Calculate n pairs’ a+b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                System.out.println(a+b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Input: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 </span><br><span class="line">2 4</span><br><span class="line">9 21</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h2 id="and-–"><a href="#and-–" class="headerlink" title="++ and  –"></a>++ and  –</h2><ul><li><code>++/--i</code> will add&#x2F;delete value first, then return value.</li><li><code>i++/--</code> will return value first,  then add&#x2F;delete value.</li></ul><h2 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="keyword">while</span> (n-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                System.out.println(a + b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do-while-loop"><a href="#do-while-loop" class="headerlink" title="do while loop"></a>do while loop</h2><ul><li>do while loop will run at least once<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    content</span><br><span class="line">&#125; <span class="keyword">while</span> (condtion);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Wrapper-Classes"><a href="#Wrapper-Classes" class="headerlink" title="Wrapper Classes"></a>Wrapper Classes</h2><ul><li><code>Integer</code> wraps <code>int</code>.</li><li><code>Long</code> wraps <code>long</code>.</li><li><code>Short</code> wraps <code>short</code>.</li><li><code>Byte</code> wraps <code>byte</code>.</li><li><code>Double</code> wraps <code>double</code>.</li><li><code>Float</code> wraps <code>float</code>.</li><li><code>Character</code> wraps <code>char</code>.</li><li><code>Boolean</code> wraps <code>boolean</code>.</li></ul><h2 id="Type-Conversion"><a href="#Type-Conversion" class="headerlink" title="Type Conversion"></a>Type Conversion</h2><p>From small to large:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> b; </span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b; </span><br><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> b;</span><br></pre></td></tr></table></figure><p>From large to small:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-0059-Spiral-Matrix-II</title>
      <link href="/2023/09/27/LeetCode-0059-Spiral-Matrix-II/"/>
      <url>/2023/09/27/LeetCode-0059-Spiral-Matrix-II/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n2</code> in spiral order.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: [[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul><h1 id="Solutions-amp-Summary"><a href="#Solutions-amp-Summary" class="headerlink" title="Solutions &amp; Summary"></a>Solutions &amp; Summary</h1><ul><li>For every complete circle, we have to draw each of the four sides. While drawing each side, one must adhere to a consistent principle of either left-closed and right-open, or left-open and right-closed, so that the entire circle can be drawn according to a unified rule.</li></ul><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922102236.png" alt="spiral"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 控制循环次数</span></span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 每次循环的开始点(start, start)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 定义填充数字</span></span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop++ &lt; n / <span class="number">2</span>) &#123; <span class="comment">// 判断边界后，loop从1开始</span></span><br><span class="line">            <span class="comment">// 模拟上侧从左到右</span></span><br><span class="line">            <span class="keyword">for</span> (j = start; j &lt; n - loop; j++) &#123;</span><br><span class="line">                res[start][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟右侧从上到下</span></span><br><span class="line">            <span class="keyword">for</span> (i = start; i &lt; n - loop; i++) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟下侧从右到左</span></span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= loop; j--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟左侧从下到上</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt;= loop; i--) &#123;</span><br><span class="line">                res[i][j] = count++;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            res[start][start] = count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;; <span class="comment">// right, down, left, up</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// start direction: right</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>; number &lt;= n * n; number++)&#123;</span><br><span class="line">            res[row][col] = number;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">nextRow</span> <span class="operator">=</span> row + dirs[dir][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextCol</span> <span class="operator">=</span> col + dirs[dir][<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// change direction if next cell is out of bound or already filled</span></span><br><span class="line">            <span class="keyword">if</span> (nextRow &lt; <span class="number">0</span> || nextRow &gt;= n || nextCol &lt; <span class="number">0</span> || nextCol &gt;= n || res[nextRow][nextCol] != <span class="number">0</span>) &#123;</span><br><span class="line">                dir = (dir + <span class="number">1</span>) % <span class="number">4</span>; <span class="comment">// change direction</span></span><br><span class="line">                nextRow = row + dirs[dir][<span class="number">0</span>];</span><br><span class="line">                nextCol = col + dirs[dir][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            row = nextRow;</span><br><span class="line">            col = nextCol;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Time Complexity: O (n^2) </li><li>Space Complexity: O (1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Matrix </tag>
            
            <tag> Simulation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-0209-Minimum-Size-Subarray-Sum</title>
      <link href="/2023/09/27/LeetCode-0209-Minimum-Size-Subarray-Sum/"/>
      <url>/2023/09/27/LeetCode-0209-Minimum-Size-Subarray-Sum/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>Given an array of positive integers <code>nums</code> and a positive integer <code>target</code>, return <em>the <strong>minimal length</strong> of a</em> </p><p><em>subarray</em> ( A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.)  <em>whose sum is greater than or equal to</em> <code>target</code>. If there is no such subarray, return <code>0</code> instead. </p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The subarray [4,3] has the minimal length under the problem constraint.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: target = 4, nums = [1,4,4]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">Output: 0 </span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= target &lt;= 109</code></li><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 104</code></li></ul><h1 id="Solution-amp-Summary"><a href="#Solution-amp-Summary" class="headerlink" title="Solution &amp; Summary"></a>Solution &amp; Summary</h1><h2 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h2><ul><li>A sliding window involves continuously adjusting the start and end positions of a subsequence to obtain the result we want. If only one ‘for’ loop is used, then the index of the loop must represent the end position of the sliding window.</li></ul><p><img src="https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif" alt="Sliding Window"></p><ul><li><p>To implement a sliding window, mainly determine the following three points:</p><ol><li>What is inside the window?</li><li>How to move the start position of the window?</li><li>How to move the end position of the window?</li></ol><p>The window is the smallest contiguous subarray whose sum is ≥ s.</p><p>How to move the starting position of the window: If the value of the current window is greater than s, the window needs to move forward (that is, it should shrink).</p><p>How to move the ending position of the window: The end position of the window is the pointer traversing the array, which is the index in the ‘for’ loop.”</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑动窗口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (sum &gt;= s) &#123;</span><br><span class="line">                result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Time Complexity: O (n) </li><li>Space Complexity: O (1)</li></ul><h2 id="Why-is-O-n"><a href="#Why-is-O-n" class="headerlink" title="Why is O(n)"></a>Why is O(n)</h2><p><strong>Right Pointer</strong>: The for loop runs n times where n is the length of the array, and in each iteration, the right pointer is moved one step to the right. Thus, the right pointer visits each element exactly once.</p><p><strong>Left Pointer</strong>: The left pointer starts at the beginning of the array and moves to the right inside the while loop. Since the left pointer only moves to the right and never moves back, it also visits each element exactly once.</p><p>Since both pointers visit each of the n elements at most once, the overall time complexity of this algorithm is <strong>O(n)</strong>, where n is the length of the input array nums.</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Sliding Window </tag>
            
            <tag> prefix Sum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-0977-Squares-of-a-Sorted-Array</title>
      <link href="/2023/09/27/LeetCode-0977-Squares-of-a-Sorted-Array/"/>
      <url>/2023/09/27/LeetCode-0977-Squares-of-a-Sorted-Array/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing</strong> order, return <em>an array of <strong>the squares of each number</strong> sorted in non-decreasing order</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-4,-1,0,3,10]</span><br><span class="line">Output: [0,1,9,16,100]</span><br><span class="line">Explanation: After squaring, the array becomes [16,1,0,9,100].</span><br><span class="line">After sorting, it becomes [0,1,9,16,100].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-7,-3,2,3,11]</span><br><span class="line">Output: [4,9,9,49,121]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><p><code>1 &lt;= nums.length &lt;= 104</code></p></li><li><p><code>-104 &lt;= nums[i] &lt;= 104</code></p></li><li><p><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</p></li></ul><h1 id="Solution-amp-Summary"><a href="#Solution-amp-Summary" class="headerlink" title="Solution &amp; Summary"></a>Solution &amp; Summary</h1><h2 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two Pointers"></a>Two Pointers</h2><ul><li><p>The square of a negative number could become the maximum number, therefore, the maximum value of the squared array is at the ends of the array. It’s either at the far left or the far right; it can’t be in the middle.</p></li><li><p>At this point, we can consider the two-pointer method. Here, “i” points to the start position, and “j” points to the end position of the array.</p></li><li><p>Define a new array “result”, the same size as array A, and let “k” point to the end position of the “result” array.</p><p>If A[i] * A[i] &lt; A[j] * A[j], then result[k–] &#x3D; A[j] * A[j].</p><p>If A[i] * A[i] &gt;&#x3D; A[j] * A[j], then result[k–] &#x3D; A[i] * A[i].</p></li></ul><p><img src="https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif" alt="Squares-of-a-Sorted-Array"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> result.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] * nums[left] &gt; nums[right] * nums[right]) &#123;</span><br><span class="line">                <span class="comment">// 正数的相对位置是不变的， 需要调整的是负数平方后的相对位置</span></span><br><span class="line">                result[index--] = nums[left] * nums[left];</span><br><span class="line">                ++left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[index--] = nums[right] * nums[right];</span><br><span class="line">                --right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Time Complexity: O (n)</li><li>Space Complexity: O (1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Sorting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-0027-Remove-Element</title>
      <link href="/2023/09/25/LeetCode-0027-Remove-Element/"/>
      <url>/2023/09/25/LeetCode-0027-Remove-Element/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> <strong>in-place</strong>. The order of the elements may be changed. Then return <em>the number of elements in</em> <code>nums</code> <em>which are not equal to</em> <code>val</code>.</p><p>Consider the number of elements in <code>nums</code> which are not equal to <code>val</code> be <code>k</code>, to get accepted, you need to do the following things:</p><ul><li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the elements which are not equal to <code>val</code>. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li><li>Return <code>k</code>.</li></ul><p><strong>Custom Judge:</strong></p><p>The judge will test your solution with the following code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int val = ...; // Value to remove</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length.</span><br><span class="line">                            // It is sorted with no values equaling val.</span><br><span class="line"></span><br><span class="line">int k = removeElement(nums, val); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">sort(nums, 0, k); // Sort the first k elements of nums</span><br><span class="line">for (int i = 0; i &lt; actualLength; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">Output: 5, nums = [0,1,4,0,3,_,_,_]</span><br><span class="line">Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.</span><br><span class="line">Note that the five elements can be returned in any order.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><p><code>0 &lt;= nums.length &lt;= 100</code></p></li><li><p><code>0 &lt;= nums[i] &lt;= 50</code></p></li><li><p><code>0 &lt;= val &lt;= 100</code></p></li></ul><h1 id="Solutions-amp-Summery"><a href="#Solutions-amp-Summery" class="headerlink" title="Solutions &amp; Summery"></a>Solutions &amp; Summery</h1><ul><li>The elements of an array are contiguous in memory addresses. Individual elements within the array cannot be singularly deleted; they can only be overwritten.</li></ul><h2 id="Brute-Force-Solution"><a href="#Brute-Force-Solution" class="headerlink" title="Brute Force Solution"></a>Brute Force Solution</h2><p><img src="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95.gif" alt="Brute Force Solution"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val) &#123; <span class="comment">// 发现需要移除的元素，就将数组集体向前移动一位</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">                    nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                i--; <span class="comment">// 因为下标i以后的数值都向前移动了一位，所以i也向前移动一位</span></span><br><span class="line">                size--; <span class="comment">// 此时数组的大小-1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>Time Complexity: O (n^2) </li><li>Space Complexity: O (1)</li></ul><h2 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two Pointers"></a>Two Pointers</h2><p>The Two-Pointer Method, specifically the Fast and Slow Pointer Method, is an efficient technique used to perform the tasks of two for-loops within a single for-loop. In this method:</p><ul><li>The fast pointer is used to traverse the array and find the elements needed for the new array, where the new array refers to the array that does not contain the target elements.</li><li>The slow pointer is used to point to the position in the new array where the found elements will be updated or placed.</li></ul><p><img src="https://code-thinking.cdn.bcebos.com/gifs/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0-%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95.gif" alt="Two-Pointers"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 快慢指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fastIndex] != val) &#123;</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相向双指针法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == val) right--; <span class="comment">//将right移到从右数第一个值不为val的位置</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] == val) &#123; <span class="comment">//left位置的元素需要移除</span></span><br><span class="line">                <span class="comment">//将right位置的元素移到left（覆盖），right位置移除</span></span><br><span class="line">                nums[left] = nums[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">while</span>(right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == val) right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Time Complexity: O (n) </li><li>Space Complexity: O (1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 704 Binary Search</title>
      <link href="/2023/09/25/LeetCode-0704-Binary-Search/"/>
      <url>/2023/09/25/LeetCode-0704-Binary-Search/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p><p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: 2 does not exist in nums so return -1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><p><code>1 &lt;= nums.length &lt;= 104</code></p></li><li><p><code>-104 &lt; nums[i], target &lt; 104</code></p></li><li><p>All the integers in <code>nums</code> are <strong>unique</strong>.</p></li><li><p><code>nums</code> is sorted in ascending order.</p></li></ul><h1 id="Solutions-amp-Summary"><a href="#Solutions-amp-Summary" class="headerlink" title="Solutions &amp; Summary"></a>Solutions &amp; Summary</h1><h2 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><ul><li>Sorted array with unique elements is a foundational prerequisite for implementing the binary search method.</li></ul><h2 id="Boundary-conditions-and-interval-definitions"><a href="#Boundary-conditions-and-interval-definitions" class="headerlink" title="Boundary conditions and interval definitions"></a>Boundary conditions and interval definitions</h2><h3 id="left-right"><a href="#left-right" class="headerlink" title="[left, right]"></a>[left, right]</h3><ul><li>Using while (left &lt;&#x3D; right) is significant as left &#x3D;&#x3D; right is a meaningful condition</li><li>When if (nums[middle] &gt; target) is true, assigning right &#x3D; middle - 1 is appropriate. This is because, in this scenario, nums[middle] is definitively not the target.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Time Complexity: O (log n)</li><li>Space Complexity: O (1)</li></ul><h3 id="left-right-1"><a href="#left-right-1" class="headerlink" title="[left, right)"></a>[left, right)</h3><ul><li>Using while (left &lt; right) is suitable because having left &#x3D;&#x3D; right is meaningless in this interval as the right boundary is exclusive.</li><li>If nums[middle] &gt; target, updating right to middle is correct. This is because, in this situation, nums[middle] is definitively not equal to the target, so we continue the search in the left interval.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Time Complexity: O (log n)</li><li>Space Complexity: O (1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure Note</title>
      <link href="/2023/08/07/Data%20Structure%20Note/"/>
      <url>/2023/08/07/Data%20Structure%20Note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Data-Structure-Note"><a href="#Data-Structure-Note" class="headerlink" title="Data Structure Note"></a>Data Structure Note</h1><h2 id="Big-O"><a href="#Big-O" class="headerlink" title="Big O"></a>Big O</h2><table><thead><tr><th>Big O</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>Constant</td><td>statement, one line of code</td></tr><tr><td>log(n)</td><td>Logarithmic</td><td>Divide and conquer (binary search)</td></tr><tr><td>n</td><td>Linear</td><td>Loop</td></tr><tr><td>n*log(n)</td><td>Linearithmic</td><td>Effective sorting algorithms</td></tr><tr><td>n^2</td><td>Quadratic</td><td>Double loop</td></tr><tr><td>n^3</td><td>Cubic</td><td>Triple loop</td></tr><tr><td>2^n</td><td>Exponential</td><td>Complex full search</td></tr></tbody></table><h2 id="Big-O-Rules"><a href="#Big-O-Rules" class="headerlink" title="Big O Rules"></a>Big O Rules</h2><ul><li>Worest case</li></ul><h2 id="Sorting-Algorithms"><a href="#Sorting-Algorithms" class="headerlink" title="Sorting Algorithms"></a>Sorting Algorithms</h2><table><thead><tr><th>Sorting Algorithms</th><th>Space complexity</th><th>Time complexity</th><th>Time complexity</th></tr></thead><tbody><tr><td></td><td>Worst case</td><td>Best case</td><td>Worst case</td></tr><tr><td>Insertion Sort</td><td>O(1)</td><td>O(n)</td><td>O(n^2)</td></tr><tr><td>Selection Sort</td><td>O(1)</td><td>O(n^2)</td><td>O(n^2)</td></tr><tr><td>Bubble Sort</td><td>O(1)</td><td>O(n)</td><td>O(n^2)</td></tr><tr><td>Mergesort</td><td>O(n)</td><td>O(n log n)</td><td>O(n log n)</td></tr><tr><td>Quicksort</td><td>O(log n)</td><td>O(n log n)</td><td>O(n^2)</td></tr><tr><td>Heapsort</td><td>O(1)</td><td>O(n log n)</td><td>O(n log n)</td></tr></tbody></table><h2 id="Data-Structure-Operations"><a href="#Data-Structure-Operations" class="headerlink" title="Data Structure Operations"></a>Data Structure Operations</h2><table><thead><tr><th>Worst Case</th><th>Access</th><th>Search</th><th>Insertion</th><th>Deletion</th><th>Space Complexity</th></tr></thead><tbody><tr><td>Array</td><td>O(1)</td><td>O(n)</td><td>O(n)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>Stack</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Queue</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Singly-Linked List</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Doubly-Linked List</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(1)</td><td>O(n)</td></tr><tr><td>Hash Table</td><td>N&#x2F;A</td><td>O(n)</td><td>O(n)</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><h2 id="Array-Basics"><a href="#Array-Basics" class="headerlink" title="Array Basics"></a>Array Basics</h2><ul><li><p>An array is a collection of data of the same type stored in contiguous memory spaces.</p></li><li><p><strong>Array indices start from 0</strong>.</p></li><li><p><strong>The memory addresses of arrays are contiguous</strong>. Precisely because the memory addresses of arrays are contiguous, when we delete or add elements, it is inevitable that the addresses of other elements have to be moved.<br><img src="https://code-thinking.cdn.bcebos.com/pics/%E7%AE%97%E6%B3%95%E9%80%9A%E5%85%B3%E6%95%B0%E7%BB%841.png" alt="The memory addresses of arrays are contiguous"></p></li><li><p>The elements of an array cannot be deleted; they can only be overwritten.</p></li><li><p>Two dimensional Array<br><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201214111631844.png" alt="Two dimensional Array"></p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 自学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch Installation for mac</title>
      <link href="/2023/02/19/Pytorch-Installation-for-mac/"/>
      <url>/2023/02/19/Pytorch-Installation-for-mac/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1MjQ2OTQ3Ng==&mid=2247539248&idx=2&sn=1ccf262f6bb45662cd1ff80377573ea1&chksm=e9e153bbde96daadc4251f1d43e47c525c2b6735b2964af02c7a2461c1317cb196dbec2ea0a3&scene=27">Reference</a></p><p>第一步 -安装和配置Miniforge</p><p>我花了很多时间为数据科学需求配置我的M1 Mac。但是都不能完美的解决我的问题。直到我找到了这个。根据网速的不同，完全设置需要5到10分钟。</p><p>首先，你需要安装Homebrew。它是Mac上的一个包管理器，你可以在终端上执行以下命令来安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>如果你正在安装一个新的M1 Mac，很可能系统里面没有包含XCode构建工具，但是miniforge需要他的一些文件。所以如果这些没有这些文件的，终端会通知你，并询问你是否要安装它们，我们只要安装就好了。</p><p>一旦安装了XCode构建工具和自制程序，你可以重启终端并安装Miniforge：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install miniforge</span><br></pre></td></tr></table></figure><p>可能有几百MB的下载，所以需要一些时间才能完成。完成之后，为Z shell (zsh)初始化conda：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init zsh</span><br></pre></td></tr></table></figure><p>最后，重新启动终端。!Miniforge现在已经安装好了，你可以创建虚拟环境了。</p><p>第二步-创建虚拟环境</p><p>下面的Terminal命令将基于Python 3.9创建一个名为pytorch_env的新虚拟环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name pytorch_env python=3.9</span><br></pre></td></tr></table></figure><p>创建完成后，用以下命令激活它:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch_env</span><br></pre></td></tr></table></figure><p>你应该看到这样的东西：<br><img src="/images/pytorch/pytorch_install01.png" alt="Install01"></p><p>第三步 -安装PyTorch</p><p>你可以在Anaconda的网站上找到一个原生的PyTorch包。你应该在平台下寻找osx-arm64，它告诉你它是M1兼容的：</p><p>你可以使用下面的命令来安装PyTorch和Torchvision：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c pytorch pytorch torchvision</span><br></pre></td></tr></table></figure><p>PyTorch现在安装好了!让我们接下来测试一下。</p><p>第四步 -测试</p><p>PyTorch的GitHub页面附带了许多<a href="https://github.com/pytorch/examples">示例</a>，我们找个<a href="https://github.com/pytorch/examples/blob/main/mnist/main.py">简单</a>的：用于训练手写数字分类器的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"><span class="keyword">from</span> torch.optim.lr_scheduler <span class="keyword">import</span> StepLR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        self.dropout1 = nn.Dropout(<span class="number">0.25</span>)</span><br><span class="line">        self.dropout2 = nn.Dropout(<span class="number">0.5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">9216</span>, <span class="number">128</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">128</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = F.max_pool2d(x, <span class="number">2</span>)</span><br><span class="line">        x = self.dropout1(x)</span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)</span><br><span class="line">        x = self.fc1(x)</span><br><span class="line">        x = F.relu(x)</span><br><span class="line">        x = self.dropout2(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        output = F.log_softmax(x, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">args, model, device, train_loader, optimizer, epoch</span>):</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        data, target = data.to(device), target.to(device)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        output = model(data)</span><br><span class="line">        loss = F.nll_loss(output, target)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span> batch_idx % args.log_interval == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\tLoss: &#123;:.6f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                epoch, batch_idx * <span class="built_in">len</span>(data), <span class="built_in">len</span>(train_loader.dataset),</span><br><span class="line">                <span class="number">100.</span> * batch_idx / <span class="built_in">len</span>(train_loader), loss.item()))</span><br><span class="line">            <span class="keyword">if</span> args.dry_run:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">model, device, test_loader</span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data, target <span class="keyword">in</span> test_loader:</span><br><span class="line">            data, target = data.to(device), target.to(device)</span><br><span class="line">            output = model(data)</span><br><span class="line">            test_loss += F.nll_loss(output, target, reduction=<span class="string">&#x27;sum&#x27;</span>).item()  <span class="comment"># sum up batch loss</span></span><br><span class="line">            pred = output.argmax(dim=<span class="number">1</span>, keepdim=<span class="literal">True</span>)  <span class="comment"># get the index of the max log-probability</span></span><br><span class="line">            correct += pred.eq(target.view_as(pred)).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    test_loss /= <span class="built_in">len</span>(test_loader.dataset)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        test_loss, correct, <span class="built_in">len</span>(test_loader.dataset),</span><br><span class="line">        <span class="number">100.</span> * correct / <span class="built_in">len</span>(test_loader.dataset)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Training settings</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;PyTorch MNIST Example&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--batch-size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">64</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;input batch size for training (default: 64)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--test-batch-size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1000</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;input batch size for testing (default: 1000)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">14</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;number of epochs to train (default: 14)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">1.0</span>, metavar=<span class="string">&#x27;LR&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;learning rate (default: 1.0)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--gamma&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0.7</span>, metavar=<span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;Learning rate step gamma (default: 0.7)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--no-cuda&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, default=<span class="literal">False</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;disables CUDA training&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--no-mps&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, default=<span class="literal">False</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;disables macOS GPU training&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--dry-run&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, default=<span class="literal">False</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;quickly check a single pass&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>, metavar=<span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;random seed (default: 1)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--log-interval&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;how many batches to wait before logging training status&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-model&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, default=<span class="literal">False</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;For Saving the current Model&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    use_cuda = <span class="keyword">not</span> args.no_cuda <span class="keyword">and</span> torch.cuda.is_available()</span><br><span class="line">    use_mps = <span class="keyword">not</span> args.no_mps <span class="keyword">and</span> torch.backends.mps.is_available()</span><br><span class="line"></span><br><span class="line">    torch.manual_seed(args.seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> use_cuda:</span><br><span class="line">        device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> use_mps:</span><br><span class="line">        device = torch.device(<span class="string">&quot;mps&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        device = torch.device(<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train_kwargs = &#123;<span class="string">&#x27;batch_size&#x27;</span>: args.batch_size&#125;</span><br><span class="line">    test_kwargs = &#123;<span class="string">&#x27;batch_size&#x27;</span>: args.test_batch_size&#125;</span><br><span class="line">    <span class="keyword">if</span> use_cuda:</span><br><span class="line">        cuda_kwargs = &#123;<span class="string">&#x27;num_workers&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">                       <span class="string">&#x27;pin_memory&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                       <span class="string">&#x27;shuffle&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">        train_kwargs.update(cuda_kwargs)</span><br><span class="line">        test_kwargs.update(cuda_kwargs)</span><br><span class="line"></span><br><span class="line">    transform=transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">        ])</span><br><span class="line">    dataset1 = datasets.MNIST(<span class="string">&#x27;../data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>,</span><br><span class="line">                       transform=transform)</span><br><span class="line">    dataset2 = datasets.MNIST(<span class="string">&#x27;../data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                       transform=transform)</span><br><span class="line">    train_loader = torch.utils.data.DataLoader(dataset1,**train_kwargs)</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(dataset2, **test_kwargs)</span><br><span class="line"></span><br><span class="line">    model = Net().to(device)</span><br><span class="line">    optimizer = optim.Adadelta(model.parameters(), lr=args.lr)</span><br><span class="line"></span><br><span class="line">    scheduler = StepLR(optimizer, step_size=<span class="number">1</span>, gamma=args.gamma)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, args.epochs + <span class="number">1</span>):</span><br><span class="line">        train(args, model, device, train_loader, optimizer, epoch)</span><br><span class="line">        test(model, device, test_loader)</span><br><span class="line">        scheduler.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.save_model:</span><br><span class="line">        torch.save(model.state_dict(), <span class="string">&quot;mnist_cnn.pt&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>只需下载该脚本并从终端运行它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><p>看看输出<br><img src="/images/pytorch/pytorch_install02.png" alt="Install02"><br>看样子还不错!让我们打开Activity Monitor来验证Python是否在本机运行：</p><p><img src="/images/pytorch/pytorch_install03.png" alt="Install03"></p><p>如果你在“Kind”下看到“Apple”，这意味着程序是在M1芯片上本地运行的，而不是在Rosetta模拟器下。</p><p>最后总结</p><p>这样你就可以在M1机器上成功安装PyTorch了。</p><p>因为有了miniforge所以安装PyTorch比预期的要容易的多。当然它的运行速度比不上gpu，但这足以让你开始学习和试验。</p>]]></content>
      
      
      <categories>
          
          <category> 自学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Note</title>
      <link href="/2023/01/13/Linux-Note/"/>
      <url>/2023/01/13/Linux-Note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Linux-Note"><a href="#Linux-Note" class="headerlink" title="Linux Note"></a>Linux Note</h1><p><strong>Refer</strong>:  <a href="https://linuxsurvival.com/">linuxsurvival.com</a></p><h1 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h1><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><code>ls</code> command is used to list the contents of a directory. Linux is case-sensitive. In other words, if you type “LS” instead of “ls”, Linux will not recognize the command.</p><h2 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a><code>ls -l</code></h2><p><img src="/../images/md_source/ls-l.png" alt="ls-l"></p><ul><li><p>The first character will almost always be either a ‘-‘, which means it’s a file, or a ‘d’, which means it’s a directory. In our example, all three of them are files.</p></li><li><p>The next nine characters (rw-r–r–) show the security.<br>  <img src="/../images/md_source/ls-l2.png" alt="ls-l"></p><ul><li>The ‘r’ means you can “read” the file’s contents.</li><li>The ‘w’ means you can “write”, or modify, the file’s contents.</li><li>The ‘x’ means you can “execute” the file. </li><li>If any of the “rwx” characters is replaced by a ‘-‘, then that permission has been revoked.</li><li>The first three characters are the owner’s (keeper) permissions, the following three characters are the group (prim) members’ permissions and the last three characters are the permissions for anyone referred to as “World”.</li></ul></li><li><p>The next column shows the owner of the file. In our imaginary zoo, your UserID is “keeper”.</p></li><li><p>The next column shows the group owner of the file. Recall that we want to give the “prim” group of people special access to these files.</p></li><li><p>The next column shows the size of the file in bytes.</p></li><li><p>The next column shows the time the file was last modified (in reality, it would also show the date).</p></li><li><p>The final column gives the filename.</p></li></ul><h2 id="more"><a href="#more" class="headerlink" title="more"></a><code>more</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP blog_backups % more package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;6.3.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;aplayer&quot;</span>: <span class="string">&quot;^1.10.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^6.3.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-search&quot;</span>: <span class="string">&quot;^2.4.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-pug&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-tag-aplayer&quot;</span>: <span class="string">&quot;^3.0.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-theme-butterfly&quot;</span>: <span class="string">&quot;^4.5.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;^0.0.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-wordcount&quot;</span>: <span class="string">&quot;^6.0.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>more</code> command is used to view the contents of a file. </p><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br><span class="line">LICENSEdb.jsonpublic<span class="built_in">test</span></span><br><span class="line">README.mdnode_modulesscaffoldsthemes</span><br><span class="line">_config.butterfly.ymlpackage-lock.jsonscripts</span><br><span class="line">_config.ymlpackage.json<span class="built_in">source</span></span><br></pre></td></tr></table></figure><p><code>mkdir</code> is the command to create a directory  which is short for “make directory”.</p><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br><span class="line">LICENSEdb.jsonpublic<span class="built_in">test</span></span><br><span class="line">README.mdnode_modulesscaffoldsthemes</span><br><span class="line">_config.butterfly.ymlpackage-lock.jsonscripts</span><br><span class="line">_config.ymlpackage.json<span class="built_in">source</span></span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">mv</span> <span class="built_in">test</span> project</span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br><span class="line">LICENSEdb.jsonproject<span class="built_in">source</span></span><br><span class="line">README.mdnode_modulespublicthemes</span><br><span class="line">_config.butterfly.ymlpackage-lock.jsonscaffolds</span><br><span class="line">_config.ymlpackage.jsonscripts</span><br></pre></td></tr></table></figure><p><code>mv</code> command is used to move file. <code>mv filename target_directory</code><br>Renaming files is simply a case of “moving” a file from one name to another. <code>mv filename newname</code></p><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">cd</span> blog_backups</span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % </span><br><span class="line"></span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">cd</span> ..</span><br><span class="line">(base) hanqichen@HanqideMBP project % </span><br></pre></td></tr></table></figure><p><code>cd</code> is the command to change directory.<br><code>cd ..</code>:  <code>..</code>, it refers to the directory above your current directory.</p><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">pwd</span></span><br><span class="line">/Users/hanqichen/project/blog_backups</span><br></pre></td></tr></table></figure><p><code>pwd</code> command is used to “print working directory”.</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span></span><br><span class="line">JavaBlockChainWashU-CourseWork-330S-503Spbkey.txt</span><br><span class="line">Simple-Quiz-JavaScriptblog_backupstest_new</span><br><span class="line">Simple-Weather-App-Javascriptgeneral token.txt</span><br><span class="line">Tempor Testindividual_instance.pem</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">cp</span> pbkey.txt blog_backups</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">cd</span> blog_backups</span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br><span class="line">LICENSEdb.jsonpbkey.txt<span class="built_in">source</span></span><br><span class="line">README.mdnode_modulespublicthemes</span><br><span class="line">_config.butterfly.ymlpackage-lock.jsonscaffolds</span><br><span class="line">_config.ymlpackage.jsonscripts</span><br></pre></td></tr></table></figure><p><code>cp</code> command is used to copy file (not directory).</p><h2 id="cp-r"><a href="#cp-r" class="headerlink" title="cp -r"></a><code>cp -r</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span></span><br><span class="line">blog_backups<span class="built_in">test</span></span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">cd</span> blog_backups</span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">cd</span> ..</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">cp</span> -r <span class="built_in">test</span> blog_backups</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">cd</span> blog_backups</span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><code>cp -r</code> command is used to copy the directories.</p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br><span class="line">LICENSEdb.jsonpbkey.txt<span class="built_in">source</span></span><br><span class="line">README.mdnode_modulespublicthemes</span><br><span class="line">_config.butterfly.ymlpackage-lock.jsonscaffolds</span><br><span class="line">_config.ymlpackage.jsonscripts</span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">rm</span> pbkey.txt</span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">ls</span></span><br><span class="line">LICENSEdb.jsonpublicthemes</span><br><span class="line">README.mdnode_modulesscaffolds</span><br><span class="line">_config.butterfly.ymlpackage-lock.jsonscripts</span><br><span class="line">_config.ymlpackage.json<span class="built_in">source</span></span><br></pre></td></tr></table></figure><p><code>rm</code> command is used to remove file.</p><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><code>rmdir</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span></span><br><span class="line">JavaBlockChainWashU-CourseWork-330S-503Spbkey.txt</span><br><span class="line">Simple-Quiz-JavaScriptblog_backupstest_new</span><br><span class="line">Simple-Weather-App-Javascriptgeneral token.txt</span><br><span class="line">Tempor Testindividual_instance.pem</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">rmdir</span> test_new</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span></span><br><span class="line">JavaBlockChainTempor Testgeneral token.txt</span><br><span class="line">Simple-Quiz-JavaScriptWashU-CourseWork-330S-503Sindividual_instance.pem</span><br><span class="line">Simple-Weather-App-Javascriptblog_backupspbkey.txt</span><br></pre></td></tr></table></figure><p><code>rmdir</code> command is used to remove empty directory.</p><h2 id="rm-r"><a href="#rm-r" class="headerlink" title="rm -r"></a><code>rm -r</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">rmdir</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">rmdir</span>: <span class="built_in">test</span>: Directory not empty</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">rm</span> -r <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><code>rm -r</code> command is used to remove directories that contains at least one file.</p><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span> -l</span><br><span class="line">drwxr-xr-x   2 hanqichen  staff    64 Jan 14 18:35 <span class="built_in">test</span></span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">chmod</span> ugo+rwx <span class="built_in">test</span></span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span> -l</span><br><span class="line">drwxrwxrwx   2 hanqichen  staff    64 Jan 14 18:35 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><code>chmod</code> command is used to change the security “mode” of the file.</p><p>The first argument you give to the “chmod” command is <code>u</code>, <code>g</code>, <code>o</code>,  (<code>u</code>: owner, <code>g</code>: group, <code>o</code>:others ) or a combination of them which specifies which of the three “rwx” sets you want to modify.</p><p>Type a <code>+</code> to say that “adding” a permission or <code>-</code> to say that “removing” a permission.</p><p>Then type the permission type from <code>rwx</code> or a combination of them to add permissions.</p><p>Finally, specify which file are changing.</p><p><code>chmod usersets+/-permission_types filename_or_directoryname</code></p><h2 id="groups"><a href="#groups" class="headerlink" title="groups"></a><code>groups</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP ~ % <span class="built_in">groups</span></span><br><span class="line">staff everyone localaccounts _appserverusr admin _appserveradm _lpadmin com.apple.sharepoint.group.1 _appstore _lpoperator _developer _analyticsusers com.apple.access_ftp com.apple.access_screensharing com.apple.access_ssh com.apple.access_remote_ae</span><br></pre></td></tr></table></figure><p><code>groups</code> command is used to get a listing of group memberships.</p><h2 id=""><a href="#" class="headerlink" title="~"></a><code>~</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">pwd</span></span><br><span class="line">/Users/hanqichen/project</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">cd</span> ~</span><br><span class="line">(base) hanqichen@HanqideMBP ~ % <span class="built_in">pwd</span></span><br><span class="line">/Users/hanqichen</span><br></pre></td></tr></table></figure><p><code>~</code> (Tilde): Home directory of user. The tilde also can be used to specify another user’s home directory. <code>cd ~otherusername</code></p><ul><li>One of the nicest things about using the tilde is that you don’t have to know where anyone’s home directory is located. Sometimes system administrators will move home directories to new locations to alleviate disk space problems. If you always use the tilde, you might not even notice such moves.</li></ul><h2 id="man"><a href="#man" class="headerlink" title="man"></a><code>man</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP ~ % man</span><br><span class="line">What manual page <span class="keyword">do</span> you want?</span><br><span class="line">(base) hanqichen@HanqideMBP ~ % man man </span><br></pre></td></tr></table></figure><p><code>man man</code>: displays the manual pages describing the “man” command.<br>The heading begins with “man(1)”. The “(1)” means that the “man” command is found in Section 1 of the manual. The number of sections in the online manual varies from system to system, but Section 1 is always the “User Commands” section. In fact, unless you are a programmer or a system administrator, you will probably never need to look in any other section.</p><p><code>NAME</code> contains the name of the command and a brief description of what it does.</p><p><code>SYNOPSIS</code> shows the syntax of the command. In the page at right, <code>[-k]</code> refers to all of the possible options to the man command. In this case there is only one. The <code>-k</code> is surrounded by square brackets because it is an optional part of the command. That is, if you do not include it, the command will still function. The meaning of each option is explained in the <code>OPTIONS</code> section below. </p><p><code>keyword ...</code> refers to the possible arguments to the command. Since it is not surrounded by square brackets, it is not optional. That is, you must always include a <code>keyword</code> argument to the <code>man</code> command. The <code>...</code> means that you can specify more than one keyword.</p><p><code>DESCRIPTION</code> gives an overview of the purpose of the command.</p><p><code>OPTIONS</code> lists all of the possible options and arguments for this command and what they do.</p><p><code>SEE ALSO</code> is not of direct importance, but it can be quite useful because it lists commands which have a related purpose.</p><p>After examining this output, it is obvious that the <code>-k</code> option will help you searches for man page descriptions containing specified keywords. <code>man -k special_keywords</code></p><h2 id="finger"><a href="#finger" class="headerlink" title="finger"></a><code>finger</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP ~ % finger hanqichen</span><br><span class="line">Login: hanqichen      Name: Hanqi Chen</span><br><span class="line">Directory: /Users/hanqichen         Shell: /bin/zsh</span><br><span class="line">On since Sun Dec 25 10:07 (CST) on console, idle 20 days 9:29 (messages off)</span><br><span class="line">On since Fri Jan 13 21:08 (CST) on ttys000</span><br><span class="line">No Mail.</span><br><span class="line">No Plan.</span><br></pre></td></tr></table></figure><p><code>finger</code>: show the user information. <code>finger username</code></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % find ~ -name <span class="string">&quot;blog*&quot;</span></span><br></pre></td></tr></table></figure><p><code>find</code> command used to find files.</p><p>The first argument you specify is the directory to start the search from. If “find” always searched the entire tree on a system, it would be very inefficient, so this first argument allows you to limit your search. In the above example, it will be started from your home directory (<code>~</code>) and will then search the entire tree under it. </p><p><code>.</code> which represents your current directory.</p><p>The <code>-name</code> option says that you are searching for a file’s name. At first, this might seem obvious and redundant, but you have to understand just how powerful the “find” command is. You can use it to search for files of a particular size, date, owner, and a variety of other criteria.</p><p>The argument to <code>-name</code> can be as simple as <code>blog_backups</code> if you know that is the exact name of the file. But, if you’re not sure whether the file is called <code>blog</code>, <code>blogs</code>, or even <code>blog-favorite</code>, then you can use a wildcard, like <code>*</code>. However, when you use a wildcard, you need to surround the argument in quotes. If you don’t, you will receive a rude error message.</p><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP <span class="built_in">test</span> % <span class="built_in">cat</span> t1.txt</span><br><span class="line">Hello                                                                                                 (base) hanqichen@HanqideMBP <span class="built_in">test</span> % <span class="built_in">cat</span> t2.txt</span><br><span class="line">World!                                                                                                (base) hanqichen@HanqideMBP <span class="built_in">test</span> % <span class="built_in">cat</span> t1.txt t2.txt</span><br><span class="line">HelloWorld!     </span><br></pre></td></tr></table></figure><p><code>cat</code>: The word for “combine” is <code>concatenate</code>. Since that would be a real pain to spell all of the time, the Linux concatenation command is simply <code>cat</code>.  This command can even be used with just one filename argument, in which case, that file’s contents alone will be printed to the screen. In fact, many people use “cat”, rather than <code>more</code>, to display the contents of a file.</p><h2 id="gt-gt-gt"><a href="#gt-gt-gt" class="headerlink" title="&gt; &gt;&gt;"></a><code>&gt;</code> <code>&gt;&gt;</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP <span class="built_in">test</span> % <span class="built_in">cat</span> t1.txt t2.txt &gt; c.txt   </span><br><span class="line">(base) hanqichen@HanqideMBP <span class="built_in">test</span> % <span class="built_in">cat</span> c.txt                </span><br><span class="line">HelloWorld!%                                                                                           (base) hanqichen@HanqideMBP <span class="built_in">test</span> % <span class="built_in">cat</span> t1.txt t2.txt &gt;&gt; c.txt</span><br><span class="line">(base) hanqichen@HanqideMBP <span class="built_in">test</span> % <span class="built_in">cat</span> c.txt                 </span><br><span class="line">HelloWorld!HelloWorld!%    </span><br></pre></td></tr></table></figure><p><code>&gt;</code> <code>&gt;&gt;</code>: send the output from a command such as “cat” to a file, it can use either <code>&gt;</code> or <code>&gt;&gt;</code>.  <code>&gt;</code>would put the contents of <code>t1.txt</code> and <code>t2.txt</code>, one after the other, in a new file called <code>c.txt</code>. You can think of the <code>&gt;</code> as an arrow pointing to where you want the output to go. In the above example, if <code>c.txt</code> already exists, then it will be over-written (i.e. it will be deleted before it is recreated). Sometimes that is what you want, but often you will want to keep the previous contents of a file and simply append to it (add to the end of it). This can be accomplished by using <code>&gt;&gt;</code> rather than<code>&gt;</code>.</p><h2 id="lp"><a href="#lp" class="headerlink" title="lp"></a><code>lp</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lpr  send to printer</span><br><span class="line">lpq  display <span class="built_in">print</span> queue</span><br><span class="line">lprm remove from <span class="built_in">print</span> queue</span><br></pre></td></tr></table></figure><h3 id="lpr"><a href="#lpr" class="headerlink" title="lpr"></a><code>lpr</code></h3><p>The <code>lpr</code> command stands for “line printer”, because when the command was developed, it was assumed that you would be using that type of printer. This, of course, is no longer the case for the majority of Linux users. Now, <code>lpr</code> can be used to send jobs to PostScript printers, plotters, and any other print devices you can think of.</p><p>For example, to send a file named <code>thoughts</code> to the default printer, you would type<code>pr thoughts</code>. To send your file to a printer called <code>hp14</code> rather than the default one, you would type<code>lpr -P hp14 thoughts</code>. The <code>-P</code> stands for “printer”. The printer can have any name that your system administrator chooses, even something like <code>tower-of-babel</code>, if she feels like it. Note that <code>lpr</code> does not produce any output if the print request was successful.</p><h3 id="lpq"><a href="#lpq" class="headerlink" title="lpq"></a><code>lpq</code></h3><p>If you type <code>lpq</code> without any arguments, you will be shown the status of all print jobs in the default print queue. To display all of the print jobs in a different queue, use the <code>-P</code> option, just as you would for the <code>lpr</code> command. </p><p>For example, to check on your print job in the <code>hp14</code> queue, you would type<code>lpq -P hp14</code>.</p><h3 id="lprm"><a href="#lprm" class="headerlink" title="lprm"></a><code>lprm</code></h3><p>The command to remove print jobs is called <code>lprm</code>, which stands for “line printer remove”. </p><p>For example, to remove print job <code>148</code> from print queue <code>hp14</code>, you would type<code> lprm -P hp14 148</code>. (<code>148</code> is the task number that replace the filename)</p><h2 id="df"><a href="#df" class="headerlink" title="df"></a><code>df</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">df</span></span><br><span class="line">Filesystem     512-blocks      Used Available Capacity iused      ifree %iused  Mounted on</span><br><span class="line">/dev/disk3s1s1  965595304  22830936 652633312     4%  348618 3263166560    0%   /</span><br><span class="line">devfs                 394       394         0   100%     682          0  100%   /dev</span><br><span class="line">/dev/disk3s6    965595304   4194344 652633312     1%       2 3263166560    0%   /System/Volumes/VM</span><br><span class="line">/dev/disk3s2    965595304  18169552 652633312     3%    1080 3263166560    0%   /System/Volumes/Preboot</span><br><span class="line">/dev/disk3s4    965595304   1234272 652633312     1%     275 3263166560    0%   /System/Volumes/Update</span><br><span class="line">/dev/disk1s2      1024000     12328    985168     2%       1    4925840    0%   /System/Volumes/xarts</span><br><span class="line">/dev/disk1s1      1024000     12544    985168     2%      32    4925840    0%   /System/Volumes/iSCPreboot</span><br><span class="line">/dev/disk1s3      1024000      4240    985168     1%      52    4925840    0%   /System/Volumes/Hardware</span><br><span class="line">/dev/disk3s5    965595304 263242968 652633312    29% 1836016 3263166560    0%   /System/Volumes/Data</span><br><span class="line">map auto_home           0         0         0   100%       0          0  100%   /System/Volumes/Data/home</span><br><span class="line">/dev/disk2s1     10485672   3196440   7250400    31%      58   36252000    0%   /System/Volumes/Update/SFR/mnt1</span><br><span class="line">/dev/disk3s1    965595304  22830936 652633312     4%  348576 3263166560    0%   /System/Volumes/Update/mnt1</span><br></pre></td></tr></table></figure><p><code>512-blocks</code>: the total disk size,  <code>Used</code>: the disk space used, and <code>Available</code>: the available disk space.</p><p><code>Use%</code> column shows the percentage of user space that is currently used.</p><p><code>Mounted on</code> column shows where the disks reside in your filesystem tree. </p><p>For special directory, you can use <code>df directoryname</code> such as <code>df ~</code> (home directory), <code>df .</code> (current directory).</p><h2 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps aux"></a><code>ps aux</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP project % ps aux</span><br><span class="line">USER               PID  %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND</span><br><span class="line">hanqichen        63878  18.7  0.2 408284128  26288   ??  S    Fri07PM   1:42.40 /System/Library/Framewo</span><br><span class="line">hanqichen          651  11.7  0.2 408306400  38432   ??  S    25Dec22   7:04.67 /usr/libexec/sharingd</span><br><span class="line">_windowserver      380   7.5  0.8 413304176 126480   ??  Ss   25Dec22 703:25.07 /System/Library/Private</span><br><span class="line">hanqichen        64670   5.3  1.2 1592793184 195312   ??  S    Fri09PM  10:20.23 /Applications/Google Ch</span><br><span class="line">hanqichen        64026   4.6  1.0 442920704 170896   ??  S    Fri07PM 100:06.16 /Applications/Google Ch</span><br><span class="line">hanqichen          570   3.9  0.7 410189344 118544   ??  S    25Dec22   2:03.92 /System/Applications/Ut</span><br><span class="line">hanqichen        64044   2.2  0.8 1592694080 128464   ??  S    Fri07PM  40:01.79 /Applications/Google Ch</span><br></pre></td></tr></table></figure><p><code>ps aux</code> command used to examine running programs (or “processes”, in Linux lingo), which stands for “process status”. </p><p><code>USER</code>: the process owner.</p><p><code>PID</code>: the process ID.</p><p><code>START</code>: the date or time when this process started.</p><p><code>TIME</code>: the amount of CPU time used by this process.</p><p><code>COMMAND</code>: the command that started the process.</p><h2 id="-1"><a href="#-1" class="headerlink" title="|"></a><code>|</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> joke-1 joke-2 | lpr -P zephyr</span><br></pre></td></tr></table></figure><p>The output of <code>cat joke-1 joke-2</code> is sent directly to the printer, rather than to a file.</p><p><code>\</code> sends the output of a command as the input to another command. In other words, it “pipes” data from one command to another. </p><h2 id="grap"><a href="#grap" class="headerlink" title="grap"></a><code>grap</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zoo&gt; <span class="built_in">cat</span> joke-1 joke2 | grep rabbit</span><br><span class="line">How <span class="keyword">do</span> you catch a unique rabbit?</span><br><span class="line">How <span class="keyword">do</span> you catch a tame rabbit?</span><br></pre></td></tr></table></figure><p>Above command list only those lines containing the word rabbit in Jester’s joke files.</p><p><code>grep</code> : to find patterns in data.</p><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a><code>kill</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zoo:-&gt; ps aux | grep rogue</span><br><span class="line">keeper79616:530:05rogue</span><br><span class="line">keeper82517:040:00grep rogue</span><br><span class="line">zoo:-&gt; <span class="built_in">kill</span> 796</span><br></pre></td></tr></table></figure><p><code>kill</code>: to kill a process. <code>kill PID</code></p><p><code>kill -9</code>: to kill a provess immediately. <code>kill -9 PID</code></p><h2 id="clear"><a href="#clear" class="headerlink" title="clear"></a><code>clear</code></h2><p><code>clear</code> is a  command that is used to clear the terminal screen. </p><h1 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h1><h2 id="pathnames"><a href="#pathnames" class="headerlink" title="pathnames"></a>pathnames</h2><p>Built the pathname by starting at the top of the tree with the “root” (‘&#x2F;‘) and adding upper dictory to it. Then we added a “slash” (‘&#x2F;‘) every time we moved down the tree another level.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP ~ % <span class="built_in">mv</span> /Users/hanqichen/project/test /Users/hanqichen/project/new_test</span><br><span class="line">(base) hanqichen@HanqideMBP ~ % <span class="built_in">cd</span> project</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span></span><br><span class="line">JavaBlockChainWashU-CourseWork-330S-503Snew_test</span><br><span class="line">Simple-Quiz-JavaScriptblog_backupspbkey.txt</span><br><span class="line">Simple-Weather-App-Javascriptgeneral token.txt</span><br><span class="line">Tempor Testindividual_instance.pem</span><br></pre></td></tr></table></figure><p>Typing in a full pathname can be tedious, though, especially if you are a long way down the tree. That’s why it is often easier to specify a “relative pathname”. It is called “relative” because it specifies a filename relative to your current location, rather than from the root directory. If you don’t put a ‘&#x2F;‘ at the beginning of a pathname, then Linux knows that you are using a relative pathname.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP ~ % <span class="built_in">mv</span> project/new_test project/test</span><br><span class="line">(base) hanqichen@HanqideMBP ~ % <span class="built_in">cd</span> project</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span></span><br><span class="line">JavaBlockChainWashU-CourseWork-330S-503Spbkey.txt</span><br><span class="line">Simple-Quiz-JavaScriptblog_backups<span class="built_in">test</span></span><br><span class="line">Simple-Weather-App-Javascriptgeneral token.txt</span><br><span class="line">Tempor Testindividual_instance.pem</span><br></pre></td></tr></table></figure><p>Recall that “..” refers to the directory above your current directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">mv</span> ../test ../test_new</span><br><span class="line">(base) hanqichen@HanqideMBP blog_backups % <span class="built_in">cd</span> ..</span><br><span class="line">(base) hanqichen@HanqideMBP project % <span class="built_in">ls</span></span><br><span class="line">JavaBlockChainWashU-CourseWork-330S-503Spbkey.txt</span><br><span class="line">Simple-Quiz-JavaScriptblog_backupstest_new</span><br><span class="line">Simple-Weather-App-Javascriptgeneral token.txt</span><br><span class="line">Tempor Testindividual_instance.pem</span><br></pre></td></tr></table></figure><h2 id="Wildcard-通配符"><a href="#Wildcard-通配符" class="headerlink" title="Wildcard (通配符)"></a>Wildcard (通配符)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tron&gt; <span class="built_in">ls</span> *</span><br><span class="line">ing sing spat sport tennis</span><br><span class="line">tron&gt; <span class="built_in">ls</span> *ing</span><br><span class="line">ing sing</span><br><span class="line">tron&gt; <span class="built_in">ls</span> sp??t</span><br><span class="line">sport</span><br></pre></td></tr></table></figure><p>A wildcard allows you to specify more than one file at the same time. The ‘<em>‘ matches any number of characters. For example, if you want to execute a command on all files in the current directory, you would specify ‘</em>‘ as the filename. If you want to be more selective and match only files which end in “ing”, you would use “<em>ing”. Note that the ‘</em>‘ can even match zero characters, so “*ing” would match “ing” as well as “sing”.</p><p>The other wildcard, ‘?’, is not used very often, but it can be useful. It matches exactly one character. For example, if you want to match “sport”, but not “spat”, you would use “sp??t”. The first ‘?’ matches the ‘a’ in “spat”, but the second ‘?’ can’t match anything, so “spat” fails.</p><h2 id="Hard-Drives-Tree"><a href="#Hard-Drives-Tree" class="headerlink" title="Hard Drives Tree"></a>Hard Drives Tree</h2><p><img src="/../images/md_source/hd_tree.png" alt="hd_tree"><br>The way that hard drives are handled in Linux can be a difficult concept to grasp for Windows users. In Windows, the hard drives are labelled <code>C:</code>, <code>D:</code>, etc., and each of them has its own directory tree. As you can see in the diagram at top right, there is absolutely no connection between these trees.</p><p>On a Linux system, however, there is only one directory tree. Each hard drive is <code>mounted</code> on a particular directory in that tree. For example, the first hard drive is mounted on <code>/</code>, the root of the tree. Everything contained on that drive has been colored yellow in the diagram at bottom right. The second drive is mounted on <code>/home</code>. That means that any files or directories under <code>/home</code> in the tree will be stored on the second drive rather than on the first one. They are colored blue. Similarly, the third drive has been mounted on <code>/usr</code>. Its contents have been colored green.</p><p>Due to its single-tree approach, the Linux filesystem structure is much more flexible and usable than the Windows structure. </p>]]></content>
      
      
      <categories>
          
          <category> 自学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-0020</title>
      <link href="/2022/12/24/LeetCode-0020/"/>
      <url>/2022/12/24/LeetCode-0020/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li><p>左括号必须用相同类型的右括号闭合。</p></li><li><p>左括号必须以正确的顺序闭合。</p></li><li><p>注意空字符串可被认为是有效字符串。</p></li></ul><p><a href="https://leetcode.com/problems/valid-parentheses/">题目链接</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: s = <span class="string">&quot;()&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Example 2:</span><br><span class="line">Input: s = <span class="string">&quot;()[]&#123;&#125;&quot;</span></span><br><span class="line">Output: <span class="literal">true</span></span><br><span class="line">Example 3:</span><br><span class="line">Input: s = <span class="string">&quot;(]&quot;</span></span><br><span class="line">Output: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>此题也被引用在编译器原理中，如以下Linux命令最终进入a目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> a/b/c/../../</span><br></pre></td></tr></table></figure><ol><li>第一种情况，字符串里左方向的括号多余了 ，所以不匹配。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123;[]&#125;()</span><br></pre></td></tr></table></figure>第一种情况：已经遍历完了字符串，但是栈不为空，说明有相应的左括号没有右括号来匹配，所以return false</li><li>第二种情况，括号没有多余，但是 括号的类型没有匹配上。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;[(&#125;]&#125;</span><br></pre></td></tr></table></figure>第二种情况：遍历字符串匹配的过程中，发现栈里没有要匹配的字符。所以return false</li><li>第三种情况，字符串里右方向的括号多余了，所以不匹配。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123;[]&#125;))))</span><br></pre></td></tr></table></figure></li></ol><p>第三种情况：遍历字符串匹配的过程中，栈已经为空了，没有匹配的字符了，说明右括号没有找到对应的左括号return false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="comment">//碰到左括号，就把相应的右括号入栈</span></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                deque.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deque.isEmpty() || deque.peek() != ch) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="comment">//如果是右括号判断是否和栈顶元素匹配</span></span><br><span class="line">                deque.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后判断栈中元素是否匹配</span></span><br><span class="line">        <span class="keyword">return</span> deque.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Time complexity : O(n) because we simply traverse the given string one character at a time and push and pop operations on a stack take O(1) time.</li><li>Space complexity : O(n)) as we push all opening brackets onto the stack and in the worst case, we will end up pushing all the brackets onto the stack. e.g. <code>((((((((((</code>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雀魂役种表</title>
      <link href="/2022/12/20/%E9%9B%80%E9%AD%82%E5%BD%B9%E7%A7%8D%E8%A1%A8/"/>
      <url>/2022/12/20/%E9%9B%80%E9%AD%82%E5%BD%B9%E7%A7%8D%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一番"><a href="#一番" class="headerlink" title="一番"></a>一番</h1><p><img src="https://img1.ali213.net/glpic/2021/12/07/584_2021120742329463.jpg" alt="游侠网2"></p><h1 id="二番"><a href="#二番" class="headerlink" title="二番"></a>二番</h1><p><img src="https://img1.ali213.net/glpic/2021/12/07/584_2021120742329286.jpg" alt="游侠网3"></p><h1 id="三番-六番-双倍役满-流局"><a href="#三番-六番-双倍役满-流局" class="headerlink" title="三番 六番 双倍役满 流局"></a>三番 六番 双倍役满 流局</h1><p><img src="https://img1.ali213.net/glpic/2021/12/07/584_2021120742329239.jpg" alt="游侠网4"></p><h1 id="满贯-役满"><a href="#满贯-役满" class="headerlink" title="满贯 役满"></a>满贯 役满</h1><p><img src="https://img1.ali213.net/glpic/2021/12/07/584_202112074232978.jpg" alt="游侠网5"></p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> 雀魂 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
